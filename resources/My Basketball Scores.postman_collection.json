{
	"info": {
		"_postman_id": "fa79301d-af79-4e38-8bf9-cd6d1e96147e",
		"name": "My Basketball Scores",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Scores",
			"item": [
				{
					"name": "Adicionar Nova Pontuação",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9469fe5a-ad8a-428a-8b82-6b342c4c9e0d",
								"exec": [
									"const moment = require('moment');\r",
									"pm.globals.set('GameDate', moment().add(randomInt(-40, 0) ,'days').format('YYYY-MM-DD'));\r",
									"pm.globals.set('TotalScore', randomInt(1, 80));\r",
									"\r",
									"function randomInt(min, max) {\r",
									"\treturn min + Math.floor((max - min) * Math.random());\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cc6cc0a2-5f69-4475-b42b-be19b901edac",
								"exec": [
									"var scoreResponseSchema = {\r",
									"    'id': { 'type': 'string' },\r",
									"    'gameDate': { 'type': 'string' },\r",
									"    'totalScore': { 'type': 'integer' },\r",
									"    'isRecord': { 'type': 'boolean' },\r",
									"    'notifications': [\r",
									"        { 'property': { 'type': 'string' } },\r",
									"        { 'message': { 'type': 'string' } },\r",
									"    ]\r",
									"};\r",
									"\r",
									"pm.test('Status Created (201) is ok', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status('Created');\r",
									"});\r",
									"\r",
									"pm.test('ScoreResponse schema data is ok', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(tv4.validate(response, scoreResponseSchema)).to.be.true;    \r",
									"});\r",
									"\r",
									"pm.test('ScoreResponse data is ok', () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.gameDate).to.be.eql(`${pm.globals.get('GameDate')}T00:00:00`);\r",
									"    pm.expect(response.totalScore).to.be.eql(pm.globals.get('TotalScore'));\r",
									"    pm.expect(response.notifications).to.be.eql([]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"GameDate\": \"{{GameDate}}\",\r\n    \"TotalScore\": {{TotalScore}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:44390/api/v1/score/add",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "44390",
							"path": [
								"api",
								"v1",
								"score",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adicionar Nova Pontuação Inválida",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d84edb56-6c8f-4338-b94a-b78da6cbb2c8",
								"exec": [
									"const moment = require('moment');\r",
									"pm.globals.set('GameDateInvalid', moment('2010-08-20'));\r",
									"pm.globals.set('TotalScoreInvalid', randomInt(-99, -1) );\r",
									"\r",
									"function randomInt(min, max) {\r",
									"\treturn min + Math.floor((max - min) * Math.random());\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "52adcebd-a326-4b3b-b4fb-f57416cb56d9",
								"exec": [
									"var scoreResponseSchema = {\r",
									"    'id': { 'type': 'string' },\r",
									"    'gameDate': { 'type': 'string' },\r",
									"    'totalScore': { 'type': 'integer' },\r",
									"    'isRecord': { 'type': 'boolean' },\r",
									"    'notifications': [\r",
									"        { 'property': { 'type': 'string' } },\r",
									"        { 'message': { 'type': 'string' } },\r",
									"    ]\r",
									"};\r",
									"\r",
									"pm.test('Status Bad Request (400) is ok', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"});\r",
									"\r",
									"pm.test('ScoreResponse schema data is ok', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(tv4.validate(response, scoreResponseSchema)).to.be.true;    \r",
									"});\r",
									"\r",
									"pm.test('ScoreResponse data is ok', () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.notifications[0].property).to.be.eql('Data do Jogo');\r",
									"    pm.expect(response.notifications[0].message).to.be.eql('Informe uma data válida');\r",
									"\r",
									"    pm.expect(response.notifications[1].property).to.be.eql('Pontuação');\r",
									"    pm.expect(response.notifications[1].message).to.be.eql('Informe um valor válido');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"GameDate\": \"{{GameDateInvalid}}\",\r\n    \"TotalScore\": {{TotalScoreInvalid}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:44390/api/v1/score/add",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "44390",
							"path": [
								"api",
								"v1",
								"score",
								"add"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Reports",
			"item": [
				{
					"name": "Relatório da Temporada",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "484eb80f-df3c-4698-a09c-a6a40b55b61a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "02908fb8-49aa-413b-8639-bb29f1851abc",
								"exec": [
									"var seasonReportResponseSchema = {\r",
									"    'season': {\r",
									"        'start': { 'type': 'string' },\r",
									"        'end': { 'type': 'string' }\r",
									"    },\r",
									"    'totalGamesPlayed': { 'type': 'integer' },\r",
									"    'totalSeasonScores': { 'type': 'integer' },\r",
									"    'averageSeasonScores': { 'type': 'integer' },\r",
									"    'maxScore': { 'type': 'integer' },\r",
									"    'minimumScore': { 'type': 'integer' },\r",
									"    'totalRecordBroken': { 'type': 'integer' },\r",
									"};\r",
									"\r",
									"pm.test('Status OK (200) is ok', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status('OK');\r",
									"});\r",
									"\r",
									"pm.test('SeasonReportResponse schema data is Ok', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(tv4.validate(response, seasonReportResponseSchema)).to.be.true;    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:44390/api/v1/season-report",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "44390",
							"path": [
								"api",
								"v1",
								"season-report"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}